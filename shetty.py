import base64

# Encoded string embedded directly into the script
encoded_script = '''
'''

# Decode and execute the script
decoded_script = base64.b64decode(encoded_script).decode('utf-8')
exec(decoded_script)
